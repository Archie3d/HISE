diff --git a/extras/Introjucer/Source/Project Saving/jucer_ProjectExport_MSVC.h b/extras/Introjucer/Source/Project Saving/jucer_ProjectExport_MSVC.h
index e75533c..f89fb25 100644
--- a/extras/Introjucer/Source/Project Saving/jucer_ProjectExport_MSVC.h	
+++ b/extras/Introjucer/Source/Project Saving/jucer_ProjectExport_MSVC.h	
@@ -989,6 +989,7 @@ public:
     virtual String getToolsVersion() const      { return "4.0"; }
     virtual String getDefaultToolset() const    { return "Windows7.1SDK"; }
     Value getPlatformToolsetValue()             { return getSetting (Ids::toolset); }
+	Value getUseIPPValue()						{ return getSetting(Ids::useIPP); }
 
     String getPlatformToolset() const
     {
@@ -996,6 +997,12 @@ public:
         return s.isNotEmpty() ? s : getDefaultToolset();
     }
 
+	String getUseIPPValueAsString() const
+	{
+		const String s(settings[Ids::useIPP].toString());
+		return s;
+	}
+
     static MSVCProjectExporterVC2010* createForSettings (Project& project, const ValueTree& settings)
     {
         if (settings.hasType (getValueTreeTypeName()))
@@ -1004,6 +1011,16 @@ public:
         return nullptr;
     }
 
+	void addUseIPPProperty(PropertyListBuilder &props)
+	{
+		static const char* ippOptions[] = { "No", "Default", "Multi-Threaded Static Library", "Single-Threaded Static Library", "Multi-Threaded DLL", "Single-Threaded DLL" };
+		static const var ippValues[] = { var(), "true", "Parallel_Static", "Sequential", "Parallel_Dynamic", "Sequential_Dynamic" };
+
+		props.add(new ChoicePropertyComponent(getUseIPPValue(), "Use IPP Library",
+			StringArray(ippOptions),
+			Array<var>(ippValues, numElementsInArray(ippValues))));
+	}
+
     void createExporterProperties (PropertyListBuilder& props) override
     {
         MSVCProjectExporterBase::createExporterProperties (props);
@@ -1014,6 +1031,8 @@ public:
         props.add (new ChoicePropertyComponent (getPlatformToolsetValue(), "Platform Toolset",
                                                 StringArray (toolsetNames),
                                                 Array<var> (toolsets, numElementsInArray (toolsets))));
+
+		addUseIPPProperty(props);
     }
 
     //==============================================================================
@@ -1025,6 +1044,7 @@ public:
             XmlElement projectXml ("Project");
             fillInProjectXml (projectXml);
             addPlatformToolsetToPropertyGroup (projectXml);
+			addIPPSettingToPropertyGroup (projectXml);
 
             writeXmlOrThrow (projectXml, getVCProjFile(), "utf-8", 100);
         }
@@ -1083,6 +1103,20 @@ protected:
 
     virtual void addPlatformToolsetToPropertyGroup (XmlElement&) const {}
 
+	void addIPPSettingToPropertyGroup(XmlElement &p) const
+	{
+		if (getUseIPPValueAsString().isEmpty()) return;
+
+		forEachXmlChildElementWithTagName(p, e, "PropertyGroup")
+		{
+			XmlElement* ippProperty(new XmlElement("UseIntelIPP"));
+			ippProperty->addTextElement(getUseIPPValueAsString());
+
+			e->addChildElement(ippProperty);
+		}
+	}
+	
+
     BuildConfiguration::Ptr createBuildConfig (const ValueTree& v) const override
     {
         return new VC2010BuildConfiguration (project, v, *this);
@@ -1590,6 +1624,8 @@ public:
         props.add (new ChoicePropertyComponent (getPlatformToolsetValue(), "Platform Toolset",
                                                 StringArray (toolsetNames),
                                                 Array<var> (toolsets, numElementsInArray (toolsets))));
+
+		addUseIPPProperty(props);
     }
 
 private:
@@ -1642,6 +1678,8 @@ public:
         props.add (new ChoicePropertyComponent (getPlatformToolsetValue(), "Platform Toolset",
                                                 StringArray (toolsetNames),
                                                 Array<var> (toolsets, numElementsInArray (toolsets))));
+		
+		addUseIPPProperty(props);
     }
 
 private:
@@ -1683,6 +1721,8 @@ public:
         props.add (new ChoicePropertyComponent (getPlatformToolsetValue(), "Platform Toolset",
                                                 StringArray (toolsetNames),
                                                 Array<var> (toolsets, numElementsInArray (toolsets))));
+
+		addUseIPPProperty(props);
     }
 
 private:
diff --git a/modules/juce_core/containers/juce_Variant.cpp b/modules/juce_core/containers/juce_Variant.cpp
index 9e3335d..4c6dce5 100644
--- a/modules/juce_core/containers/juce_Variant.cpp
+++ b/modules/juce_core/containers/juce_Variant.cpp
@@ -164,6 +164,10 @@ public:
     }
 };
 
+#ifndef NUM_DIGITS_FOR_DOUBLE_VAR_TO_STRING
+#define NUM_DIGITS_FOR_DOUBLE_VAR_TO_STRING 20
+#endif
+
 //==============================================================================
 class var::VariantType_Double   : public var::VariantType
 {
@@ -174,7 +178,7 @@ public:
     int toInt (const ValueUnion& data) const noexcept override       { return (int) data.doubleValue; };
     int64 toInt64 (const ValueUnion& data) const noexcept override   { return (int64) data.doubleValue; };
     double toDouble (const ValueUnion& data) const noexcept override { return data.doubleValue; }
-    String toString (const ValueUnion& data) const override          { return String (data.doubleValue, 20); }
+	String toString (const ValueUnion& data) const override          { return String (data.doubleValue, NUM_DIGITS_FOR_DOUBLE_VAR_TO_STRING); }
     bool toBool (const ValueUnion& data) const noexcept override     { return data.doubleValue != 0; }
     bool isDouble() const noexcept override                          { return true; }
 
@@ -191,6 +195,8 @@ public:
     }
 };
 
+#undef NUM_DIGITS_FOR_DOUBLE_VAR_TO_STRING
+
 //==============================================================================
 class var::VariantType_Bool   : public var::VariantType
 {
