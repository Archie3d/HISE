/*  ===========================================================================
*
*   This file is part of HISE.
*   Copyright 2016 Christoph Hart
*
*   HISE is free software: you can redistribute it and/or modify
*   it under the terms of the GNU General Public License as published by
*   the Free Software Foundation, either version 3 of the License, or
*   (at your option) any later version.
*
*   HISE is distributed in the hope that it will be useful,
*   but WITHOUT ANY WARRANTY; without even the implied warranty of
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*   GNU General Public License for more details.
*
*   You should have received a copy of the GNU General Public License
*   along with HISE.  If not, see <http://www.gnu.org/licenses/>.
*
*   Commercial licenses for using HISE in an closed source project are
*   available on request. Please visit the project's website to get more
*   information about commercial licensing:
*
*   http://www.hise.audio/
*
*   HISE is based on the JUCE library,
*   which must be separately licensed for closed source applications:
*
*   http://www.juce.com
*
*   ===========================================================================
*/

namespace hise {
using namespace juce;


MarkdownPreview::MarkdownPreview() :
	toc(*this),
	viewport(*this),
	internalComponent(*this),
	topbar(*this)
{
	setLookAndFeel(&laf);
	viewport.setViewedComponent(&internalComponent, false);
	addAndMakeVisible(viewport);
	addAndMakeVisible(toc);
	addAndMakeVisible(topbar);

	setWantsKeyboardFocus(true);
}

bool MarkdownPreview::keyPressed(const KeyPress& k)
{
	if (k.getModifiers().isCommandDown() && k.getKeyCode() == 'C')
	{
		auto s = internalComponent.parser->getSelectionContent();

		if (s.isNotEmpty())
			SystemClipboard::copyTextToClipboard(s);

		return true;
	}

	if (k.getModifiers().isCommandDown() && k.getKeyCode() == 'F')
	{
		topbar.searchBar.showEditor();
		return true;
	}

	return false;
}

void MarkdownPreview::setNewText(const String& newText, const File& f)
{
	lastText = newText;
	lastFile = f;
	internalComponent.setNewText(newText, f);
}

void MarkdownPreview::resized()
{
	auto ar = getLocalBounds();

	auto topBounds = ar.removeFromTop(46);

	if (toc.isVisible())
	{
		toc.setBounds(ar.removeFromLeft(toc.getPreferredWidth()));

	}

	topbar.setBounds(topBounds);

#if JUCE_IOS
    int margin = 3;
#else
    int margin = 32;
#endif

	viewport.setBounds(ar.reduced(margin));

	auto h = internalComponent.getTextHeight();

	internalComponent.setSize(viewport.getWidth() - viewport.getScrollBarThickness(), h);
}

MarkdownPreview::InternalComponent::InternalComponent(MarkdownPreview& parent_) :
	layoutCache(new MarkdownRenderer::LayoutCache),
	parent(parent_)
{
	
}

MarkdownPreview::InternalComponent::~InternalComponent()
{
}

int MarkdownPreview::InternalComponent::getTextHeight()
{
	if (parser != nullptr)
		return (int)parser->getHeightForWidth((float)getWidth());

	return 5;
}

void MarkdownPreview::InternalComponent::setNewText(const String& s, const File& f)
{
	currentSearchResult = {};

	lastText = s;
	lastFile = f;

	parser = new MarkdownRenderer(s, layoutCache);
	parser->setStyleData(styleData);
	parser->addListener(this);

	for (auto lr : resolvers)
		parser->setLinkResolver(lr->clone(parser));

	for (auto ip : providers)
		parser->setImageProvider(ip->clone(parser));

#if 0
	if (f.existsAsFile())
	{
		parser->setLinkResolver(new MarkdownParser::FileLinkResolver(f.getParentDirectory()));
		parser->setImageProvider(new MarkdownParser::FileBasedImageProvider(parser, f.getParentDirectory()));
	}
#endif

	parser->parse();
	

	auto result = parser->getParseResult();

	if (getWidth() > 0)
	{
		parser->getHeightForWidth((float)getWidth());
		
	}

	if (result.failed())
		errorMessage = result.getErrorMessage();
	else
		errorMessage = {};



    scrollToAnchor(0.0f);
    
	repaint();
}

void MarkdownPreview::InternalComponent::markdownWasParsed(const Result& r)
{
	if (r.wasOk())
	{
		currentSearchResult = {};

		parent.toc.scrollToLink(parser->getLastLink(true, true));
		auto h = parser->getHeightForWidth((float)getWidth());

		parser->setTargetComponent(this);
		setSize(getWidth(), (int)h);
		parser->updateCreatedComponents();
        
        if(parser->getLastLink(false, true).isEmpty())
            scrollToAnchor(0.0f);

	}
}

void MarkdownPreview::InternalComponent::mouseDown(const MouseEvent& e)
{
	if (parser == nullptr)
		return;

	if (enableSelect)
	{
		currentLasso.setPosition(e.getPosition());
		currentLasso.setSize(0, 0);

		parser->updateSelection({});

		repaint();
	}
	
	if (e.mods.isRightButtonDown())
	{
		PopupMenu m;
		hise::PopupLookAndFeel plaf;
		m.setLookAndFeel(&plaf);

		m.addItem(1, "Back", parser->canNavigate(true));
		m.addItem(2, "Forward", parser->canNavigate(false));
        m.addItem(3, "Copy link");

		auto result = m.show();

		if (result == 1)
		{
			parser->navigate(true);
			repaint();
		}
		if (result == 2)
		{
			parser->navigate(false);
			repaint();
		}
        if(result == 3)
        {
            String s;
            s << "docs://" << parser->getLastLink(true, true);
            SystemClipboard::copyTextToClipboard(s);
        }
	}
}

void MarkdownPreview::InternalComponent::mouseDrag(const MouseEvent& e)
{
	if (enableSelect)
	{
		currentLasso = Rectangle<int>(e.getMouseDownPosition(), e.getPosition());

		parser->updateSelection(currentLasso.toFloat());
		repaint();
	}
}

void MarkdownPreview::InternalComponent::mouseUp(const MouseEvent& e)
{
	currentLasso = {};

	if (e.mods.isLeftButtonDown())
	{
		clickedLink = {};

		if(parser->gotoLink(e, getLocalBounds().toFloat()))
			repaint();
	}
	
}

void MarkdownPreview::InternalComponent::mouseMove(const MouseEvent& event)
{
	if (parser != nullptr)
	{
		auto link = parser->getHyperLinkForEvent(event, getLocalBounds().toFloat());

		if (link.valid)
		{
			if (link.tooltip.isEmpty())
				setTooltip(link.url);
			else
				setTooltip(link.tooltip);
		}
		else
			setTooltip("");

		setMouseCursor(link.valid ? MouseCursor::PointingHandCursor : MouseCursor::NormalCursor);
	}
}


void MarkdownPreview::InternalComponent::mouseWheelMove(const MouseEvent& event, const MouseWheelDetails& details)
{
	if (event.mods.isCommandDown())
	{
		float delta = details.deltaY > 0 ? 1.0f : -1.0f;

		styleData.fontSize = jlimit<float>(17.0f, 30.0f, styleData.fontSize + delta);

		parser->setStyleData(styleData);
	}
	else
	{
		Component::mouseWheelMove(event, details);
	}

}

void MarkdownPreview::InternalComponent::scrollToAnchor(float v)
{
	if (auto viewPort = findParentComponentOfClass<Viewport>())
	{
		viewPort->setViewPosition({ 0, (int)v });
	}
}

void MarkdownPreview::InternalComponent::scrollToSearchResult(Rectangle<float> v)
{
	currentSearchResult = v;
	scrollToAnchor(jmax(0.0f, v.getY() - 32.0f));
	repaint();
}

void MarkdownPreview::InternalComponent::paint(Graphics & g)
{
	g.fillAll(styleData.backgroundColour);

	auto bounds = findParentComponentOfClass<CustomViewport>()->visibleArea;

	if (errorMessage.isNotEmpty())
	{
		g.setColour(Colours::white);
		g.setFont(GLOBAL_BOLD_FONT());
		g.drawText(errorMessage, bounds, Justification::centred);
		return;
	}

	if (parser != nullptr)
	{
		float height = (float)getTextHeight();

		auto ar = Rectangle<float>(0, 0, (float)getWidth(), height);

		parser->draw(g, ar, bounds);
	}

	if (!currentLasso.isEmpty())
	{
		g.setColour(styleData.headlineColour.withAlpha(0.2f));
		g.fillRect(currentLasso);
	}

	if (!currentSearchResult.isEmpty())
	{
		g.setColour(Colours::red);
		g.drawRoundedRectangle(currentSearchResult, 2.0f, 2.0f);
	}
}

juce::Path MarkdownPreview::Topbar::TopbarPaths::createPath(const String& id) const
{
	if (id == "Back")
	{
		Path path;

		static const unsigned char pathData[] = { 110, 109, 0, 0, 62, 67, 0, 239, 122, 67, 108, 0, 0, 62, 67, 0, 239, 122, 67, 108, 27, 0, 61, 67, 102, 245, 122, 67, 108, 218, 0, 60, 67, 148, 8, 123, 67, 108, 224, 2, 59, 67, 126, 40, 123, 67, 108, 208, 6, 58, 67, 15, 85, 123, 67, 108, 75, 13, 57, 67, 43, 142, 123, 67, 108, 240, 22, 56, 67, 173, 211, 123, 67, 108, 93, 36, 55,
			67, 105, 37, 124, 67, 108, 46, 54, 54, 67, 43, 131, 124, 67, 108, 250, 76, 53, 67, 182, 236, 124, 67, 108, 87, 105, 52, 67, 199, 97, 125, 67, 108, 215, 139, 51, 67, 19, 226, 125, 67, 108, 8, 181, 50, 67, 72, 109, 126, 67, 108, 114, 229, 49, 67, 13, 3, 127, 67, 108, 155, 29, 49, 67, 2, 163, 127, 67, 108, 2, 94, 48, 67, 96,
			38, 128, 67, 108, 35, 167, 47, 67, 238, 127, 128, 67, 108, 114, 249, 46, 67, 242, 221, 128, 67, 108, 94, 85, 46, 67, 46, 64, 129, 67, 108, 80, 187, 45, 67, 100, 166, 129, 67, 108, 171, 43, 45, 67, 84, 16, 130, 67, 108, 203, 166, 44, 67, 184, 125, 130, 67, 108, 5, 45, 44, 67, 75, 238, 130, 67, 108, 166, 190, 43, 67, 198,
			97, 131, 67, 108, 246, 91, 43, 67, 221, 215, 131, 67, 108, 51, 5, 43, 67, 70, 80, 132, 67, 108, 149, 186, 42, 67, 180, 202, 132, 67, 108, 76, 124, 42, 67, 216, 70, 133, 67, 108, 127, 74, 42, 67, 98, 196, 133, 67, 108, 79, 37, 42, 67, 3, 67, 134, 67, 108, 211, 12, 42, 67, 105, 194, 134, 67, 108, 27, 1, 42, 67, 68, 66, 135,
			67, 108, 0, 0, 42, 67, 128, 119, 135, 67, 108, 0, 0, 42, 67, 128, 119, 135, 67, 108, 0, 0, 42, 67, 128, 119, 135, 67, 108, 102, 6, 42, 67, 114, 247, 135, 67, 108, 148, 25, 42, 67, 19, 119, 136, 67, 108, 126, 57, 42, 67, 16, 246, 136, 67, 108, 15, 102, 42, 67, 24, 116, 137, 67, 108, 43, 159, 42, 67, 219, 240, 137, 67, 108,
			174, 228, 42, 67, 9, 108, 138, 67, 108, 106, 54, 43, 67, 82, 229, 138, 67, 108, 44, 148, 43, 67, 106, 92, 139, 67, 108, 183, 253, 43, 67, 4, 209, 139, 67, 108, 200, 114, 44, 67, 213, 66, 140, 67, 108, 20, 243, 44, 67, 149, 177, 140, 67, 108, 74, 126, 45, 67, 253, 28, 141, 67, 108, 15, 20, 46, 67, 200, 132, 141, 67, 108,
			4, 180, 46, 67, 180, 232, 141, 67, 108, 195, 93, 47, 67, 128, 72, 142, 67, 108, 223, 16, 48, 67, 240, 163, 142, 67, 108, 229, 204, 48, 67, 200, 250, 142, 67, 108, 94, 145, 49, 67, 210, 76, 143, 67, 108, 203, 93, 50, 67, 217, 153, 143, 67, 108, 170, 49, 51, 67, 171, 225, 143, 67, 108, 114, 12, 52, 67, 27, 36, 144, 67, 108,
			153, 237, 52, 67, 254, 96, 144, 67, 108, 142, 212, 53, 67, 46, 152, 144, 67, 108, 189, 192, 54, 67, 134, 201, 144, 67, 108, 143, 177, 55, 67, 231, 244, 144, 67, 108, 107, 166, 56, 67, 54, 26, 145, 67, 108, 178, 158, 57, 67, 90, 57, 145, 67, 108, 199, 153, 58, 67, 65, 82, 145, 67, 108, 9, 151, 59, 67, 216, 100, 145, 67,
			108, 214, 149, 60, 67, 22, 113, 145, 67, 108, 138, 149, 61, 67, 242, 118, 145, 67, 108, 0, 0, 62, 67, 128, 119, 145, 67, 108, 0, 0, 62, 67, 128, 119, 145, 67, 108, 0, 0, 62, 67, 128, 119, 145, 67, 108, 229, 255, 62, 67, 77, 116, 145, 67, 108, 37, 255, 63, 67, 182, 106, 145, 67, 108, 31, 253, 64, 67, 193, 90, 145, 67, 108,
			48, 249, 65, 67, 120, 68, 145, 67, 108, 181, 242, 66, 67, 234, 39, 145, 67, 108, 16, 233, 67, 67, 41, 5, 145, 67, 108, 162, 219, 68, 67, 75, 220, 144, 67, 108, 210, 201, 69, 67, 107, 173, 144, 67, 108, 5, 179, 70, 67, 165, 120, 144, 67, 108, 168, 150, 71, 67, 29, 62, 144, 67, 108, 40, 116, 72, 67, 247, 253, 143, 67, 108,
			248, 74, 73, 67, 92, 184, 143, 67, 108, 141, 26, 74, 67, 122, 109, 143, 67, 108, 100, 226, 74, 67, 127, 29, 143, 67, 108, 253, 161, 75, 67, 160, 200, 142, 67, 108, 220, 88, 76, 67, 18, 111, 142, 67, 108, 142, 6, 77, 67, 15, 17, 142, 67, 108, 161, 170, 77, 67, 211, 174, 141, 67, 108, 175, 68, 78, 67, 156, 72, 141, 67, 108,
			84, 212, 78, 67, 173, 222, 140, 67, 108, 52, 89, 79, 67, 73, 113, 140, 67, 108, 251, 210, 79, 67, 181, 0, 140, 67, 108, 89, 65, 80, 67, 59, 141, 139, 67, 108, 10, 164, 80, 67, 36, 23, 139, 67, 108, 205, 250, 80, 67, 186, 158, 138, 67, 108, 107, 69, 81, 67, 77, 36, 138, 67, 108, 180, 131, 81, 67, 41, 168, 137, 67, 108, 128,
			181, 81, 67, 159, 42, 137, 67, 108, 177, 218, 81, 67, 254, 171, 136, 67, 108, 44, 243, 81, 67, 151, 44, 136, 67, 108, 229, 254, 81, 67, 189, 172, 135, 67, 108, 0, 0, 82, 67, 128, 119, 135, 67, 108, 0, 0, 82, 67, 128, 119, 135, 67, 108, 0, 0, 82, 67, 128, 119, 135, 67, 108, 154, 249, 81, 67, 142, 247, 134, 67, 108, 108, 230,
			81, 67, 237, 119, 134, 67, 108, 130, 198, 81, 67, 240, 248, 133, 67, 108, 241, 153, 81, 67, 232, 122, 133, 67, 108, 213, 96, 81, 67, 38, 254, 132, 67, 108, 83, 27, 81, 67, 248, 130, 132, 67, 108, 151, 201, 80, 67, 175, 9, 132, 67, 108, 213, 107, 80, 67, 151, 146, 131, 67, 108, 74, 2, 80, 67, 253, 29, 131, 67, 108, 57, 141,
			79, 67, 44, 172, 130, 67, 108, 237, 12, 79, 67, 108, 61, 130, 67, 108, 184, 129, 78, 67, 4, 210, 129, 67, 108, 243, 235, 77, 67, 57, 106, 129, 67, 108, 254, 75, 77, 67, 78, 6, 129, 67, 108, 64, 162, 76, 67, 130, 166, 128, 67, 108, 36, 239, 75, 67, 18, 75, 128, 67, 108, 30, 51, 75, 67, 114, 232, 127, 67, 108, 165, 110, 74,
			67, 94, 68, 127, 67, 108, 56, 162, 73, 67, 80, 170, 126, 67, 108, 90, 206, 72, 67, 172, 26, 126, 67, 108, 145, 243, 71, 67, 203, 149, 125, 67, 108, 106, 18, 71, 67, 5, 28, 125, 67, 108, 117, 43, 70, 67, 166, 173, 124, 67, 108, 70, 63, 69, 67, 246, 74, 124, 67, 108, 116, 78, 68, 67, 51, 244, 123, 67, 108, 153, 89, 67, 67,
			149, 169, 123, 67, 108, 81, 97, 66, 67, 76, 107, 123, 67, 108, 60, 102, 65, 67, 127, 57, 123, 67, 108, 250, 104, 64, 67, 79, 20, 123, 67, 108, 45, 106, 63, 67, 212, 251, 122, 67, 108, 121, 106, 62, 67, 28, 240, 122, 67, 108, 0, 0, 62, 67, 0, 239, 122, 67, 108, 0, 0, 62, 67, 0, 239, 122, 67, 99, 109, 128, 219, 69, 67, 192,
			248, 128, 67, 108, 128, 219, 69, 67, 64, 246, 141, 67, 108, 128, 91, 47, 67, 128, 119, 135, 67, 108, 128, 219, 69, 67, 192, 248, 128, 67, 99, 101, 0, 0 };
		path.loadPathFromData(pathData, sizeof(pathData));
		return path;
	}
	if (id == "Forward")
	{
		Path path;
		static const unsigned char pathData[] = { 110, 109, 0, 183, 107, 67, 0, 239, 122, 67, 108, 0, 183, 107, 67, 0, 239, 122, 67, 108, 27, 183, 106, 67, 102, 245, 122, 67, 108, 218, 183, 105, 67, 148, 8, 123, 67, 108, 224, 185, 104, 67, 126, 40, 123, 67, 108, 208, 189, 103, 67, 15, 85, 123, 67, 108, 75, 196, 102, 67, 43, 142, 123, 67, 108, 240, 205, 101, 67, 173, 211,
			123, 67, 108, 93, 219, 100, 67, 105, 37, 124, 67, 108, 46, 237, 99, 67, 43, 131, 124, 67, 108, 250, 3, 99, 67, 182, 236, 124, 67, 108, 87, 32, 98, 67, 199, 97, 125, 67, 108, 215, 66, 97, 67, 19, 226, 125, 67, 108, 8, 108, 96, 67, 72, 109, 126, 67, 108, 114, 156, 95, 67, 13, 3, 127, 67, 108, 155, 212, 94, 67, 2, 163, 127,
			67, 108, 2, 21, 94, 67, 96, 38, 128, 67, 108, 35, 94, 93, 67, 238, 127, 128, 67, 108, 114, 176, 92, 67, 242, 221, 128, 67, 108, 94, 12, 92, 67, 46, 64, 129, 67, 108, 80, 114, 91, 67, 100, 166, 129, 67, 108, 171, 226, 90, 67, 84, 16, 130, 67, 108, 203, 93, 90, 67, 184, 125, 130, 67, 108, 5, 228, 89, 67, 75, 238, 130, 67, 108,
			166, 117, 89, 67, 198, 97, 131, 67, 108, 246, 18, 89, 67, 221, 215, 131, 67, 108, 51, 188, 88, 67, 70, 80, 132, 67, 108, 149, 113, 88, 67, 180, 202, 132, 67, 108, 76, 51, 88, 67, 216, 70, 133, 67, 108, 127, 1, 88, 67, 98, 196, 133, 67, 108, 79, 220, 87, 67, 3, 67, 134, 67, 108, 211, 195, 87, 67, 105, 194, 134, 67, 108, 27,
			184, 87, 67, 68, 66, 135, 67, 108, 0, 183, 87, 67, 128, 119, 135, 67, 108, 0, 183, 87, 67, 128, 119, 135, 67, 108, 0, 183, 87, 67, 128, 119, 135, 67, 108, 102, 189, 87, 67, 114, 247, 135, 67, 108, 148, 208, 87, 67, 19, 119, 136, 67, 108, 126, 240, 87, 67, 16, 246, 136, 67, 108, 15, 29, 88, 67, 24, 116, 137, 67, 108, 43,
			86, 88, 67, 219, 240, 137, 67, 108, 174, 155, 88, 67, 9, 108, 138, 67, 108, 106, 237, 88, 67, 82, 229, 138, 67, 108, 44, 75, 89, 67, 106, 92, 139, 67, 108, 183, 180, 89, 67, 4, 209, 139, 67, 108, 200, 41, 90, 67, 213, 66, 140, 67, 108, 20, 170, 90, 67, 149, 177, 140, 67, 108, 74, 53, 91, 67, 253, 28, 141, 67, 108, 15, 203,
			91, 67, 200, 132, 141, 67, 108, 4, 107, 92, 67, 180, 232, 141, 67, 108, 195, 20, 93, 67, 128, 72, 142, 67, 108, 223, 199, 93, 67, 240, 163, 142, 67, 108, 229, 131, 94, 67, 200, 250, 142, 67, 108, 94, 72, 95, 67, 210, 76, 143, 67, 108, 203, 20, 96, 67, 217, 153, 143, 67, 108, 170, 232, 96, 67, 171, 225, 143, 67, 108, 114,
			195, 97, 67, 27, 36, 144, 67, 108, 153, 164, 98, 67, 254, 96, 144, 67, 108, 142, 139, 99, 67, 46, 152, 144, 67, 108, 189, 119, 100, 67, 134, 201, 144, 67, 108, 143, 104, 101, 67, 231, 244, 144, 67, 108, 107, 93, 102, 67, 54, 26, 145, 67, 108, 178, 85, 103, 67, 90, 57, 145, 67, 108, 199, 80, 104, 67, 65, 82, 145, 67, 108,
			9, 78, 105, 67, 216, 100, 145, 67, 108, 214, 76, 106, 67, 22, 113, 145, 67, 108, 138, 76, 107, 67, 242, 118, 145, 67, 108, 0, 183, 107, 67, 128, 119, 145, 67, 108, 0, 183, 107, 67, 128, 119, 145, 67, 108, 0, 183, 107, 67, 128, 119, 145, 67, 108, 229, 182, 108, 67, 77, 116, 145, 67, 108, 37, 182, 109, 67, 182, 106, 145,
			67, 108, 31, 180, 110, 67, 193, 90, 145, 67, 108, 48, 176, 111, 67, 120, 68, 145, 67, 108, 181, 169, 112, 67, 234, 39, 145, 67, 108, 16, 160, 113, 67, 41, 5, 145, 67, 108, 162, 146, 114, 67, 75, 220, 144, 67, 108, 210, 128, 115, 67, 107, 173, 144, 67, 108, 5, 106, 116, 67, 165, 120, 144, 67, 108, 168, 77, 117, 67, 29,
			62, 144, 67, 108, 40, 43, 118, 67, 247, 253, 143, 67, 108, 248, 1, 119, 67, 92, 184, 143, 67, 108, 141, 209, 119, 67, 122, 109, 143, 67, 108, 100, 153, 120, 67, 127, 29, 143, 67, 108, 253, 88, 121, 67, 160, 200, 142, 67, 108, 220, 15, 122, 67, 18, 111, 142, 67, 108, 142, 189, 122, 67, 15, 17, 142, 67, 108, 161, 97, 123,
			67, 211, 174, 141, 67, 108, 175, 251, 123, 67, 156, 72, 141, 67, 108, 84, 139, 124, 67, 173, 222, 140, 67, 108, 52, 16, 125, 67, 73, 113, 140, 67, 108, 251, 137, 125, 67, 181, 0, 140, 67, 108, 89, 248, 125, 67, 59, 141, 139, 67, 108, 10, 91, 126, 67, 36, 23, 139, 67, 108, 205, 177, 126, 67, 186, 158, 138, 67, 108, 107,
			252, 126, 67, 77, 36, 138, 67, 108, 180, 58, 127, 67, 41, 168, 137, 67, 108, 128, 108, 127, 67, 159, 42, 137, 67, 108, 177, 145, 127, 67, 254, 171, 136, 67, 108, 44, 170, 127, 67, 151, 44, 136, 67, 108, 229, 181, 127, 67, 189, 172, 135, 67, 108, 0, 183, 127, 67, 128, 119, 135, 67, 108, 0, 183, 127, 67, 128, 119, 135,
			67, 108, 0, 183, 127, 67, 128, 119, 135, 67, 108, 154, 176, 127, 67, 142, 247, 134, 67, 108, 108, 157, 127, 67, 237, 119, 134, 67, 108, 130, 125, 127, 67, 240, 248, 133, 67, 108, 241, 80, 127, 67, 232, 122, 133, 67, 108, 213, 23, 127, 67, 38, 254, 132, 67, 108, 83, 210, 126, 67, 248, 130, 132, 67, 108, 151, 128, 126,
			67, 175, 9, 132, 67, 108, 213, 34, 126, 67, 151, 146, 131, 67, 108, 74, 185, 125, 67, 253, 29, 131, 67, 108, 57, 68, 125, 67, 44, 172, 130, 67, 108, 237, 195, 124, 67, 108, 61, 130, 67, 108, 184, 56, 124, 67, 4, 210, 129, 67, 108, 243, 162, 123, 67, 57, 106, 129, 67, 108, 254, 2, 123, 67, 78, 6, 129, 67, 108, 64, 89, 122,
			67, 130, 166, 128, 67, 108, 36, 166, 121, 67, 18, 75, 128, 67, 108, 30, 234, 120, 67, 114, 232, 127, 67, 108, 165, 37, 120, 67, 94, 68, 127, 67, 108, 56, 89, 119, 67, 80, 170, 126, 67, 108, 90, 133, 118, 67, 172, 26, 126, 67, 108, 145, 170, 117, 67, 203, 149, 125, 67, 108, 106, 201, 116, 67, 5, 28, 125, 67, 108, 117, 226,
			115, 67, 166, 173, 124, 67, 108, 70, 246, 114, 67, 246, 74, 124, 67, 108, 116, 5, 114, 67, 51, 244, 123, 67, 108, 153, 16, 113, 67, 149, 169, 123, 67, 108, 81, 24, 112, 67, 76, 107, 123, 67, 108, 60, 29, 111, 67, 127, 57, 123, 67, 108, 250, 31, 110, 67, 79, 20, 123, 67, 108, 45, 33, 109, 67, 212, 251, 122, 67, 108, 121,
			33, 108, 67, 28, 240, 122, 67, 108, 0, 183, 107, 67, 0, 239, 122, 67, 108, 0, 183, 107, 67, 0, 239, 122, 67, 99, 109, 0, 128, 99, 67, 0, 203, 128, 67, 108, 0, 0, 122, 67, 192, 73, 135, 67, 108, 0, 128, 99, 67, 128, 200, 141, 67, 108, 0, 128, 99, 67, 0, 203, 128, 67, 99, 101, 0, 0 };
		path.loadPathFromData(pathData, sizeof(pathData));
		return path;
	}
	if (id == "Search")
	{
		static const unsigned char searchIcon[] = { 110, 109, 0, 0, 144, 68, 0, 0, 48, 68, 98, 7, 31, 145, 68, 198, 170, 109, 68, 78, 223, 103, 68, 148, 132, 146, 68, 85, 107, 42, 68, 146, 2, 144, 68, 98, 54, 145, 219, 67, 43, 90, 143, 68, 66, 59, 103, 67, 117, 24, 100, 68, 78, 46, 128, 67, 210, 164, 39, 68, 98, 93, 50, 134, 67, 113, 58, 216, 67, 120, 192, 249, 67, 83, 151,
			103, 67, 206, 99, 56, 68, 244, 59, 128, 67, 98, 72, 209, 112, 68, 66, 60, 134, 67, 254, 238, 144, 68, 83, 128, 238, 67, 0, 0, 144, 68, 0, 0, 48, 68, 99, 109, 0, 0, 208, 68, 0, 0, 0, 195, 98, 14, 229, 208, 68, 70, 27, 117, 195, 211, 63, 187, 68, 146, 218, 151, 195, 167, 38, 179, 68, 23, 8, 77, 195, 98, 36, 92, 165, 68, 187, 58,
			191, 194, 127, 164, 151, 68, 251, 78, 102, 65, 0, 224, 137, 68, 0, 0, 248, 66, 98, 186, 89, 77, 68, 68, 20, 162, 194, 42, 153, 195, 67, 58, 106, 186, 193, 135, 70, 41, 67, 157, 224, 115, 67, 98, 13, 96, 218, 193, 104, 81, 235, 67, 243, 198, 99, 194, 8, 94, 78, 68, 70, 137, 213, 66, 112, 211, 134, 68, 98, 109, 211, 138, 67,
			218, 42, 170, 68, 245, 147, 37, 68, 128, 215, 185, 68, 117, 185, 113, 68, 28, 189, 169, 68, 98, 116, 250, 155, 68, 237, 26, 156, 68, 181, 145, 179, 68, 76, 44, 108, 68, 16, 184, 175, 68, 102, 10, 33, 68, 98, 249, 118, 174, 68, 137, 199, 2, 68, 156, 78, 169, 68, 210, 27, 202, 67, 0, 128, 160, 68, 0, 128, 152, 67, 98, 163,
			95, 175, 68, 72, 52, 56, 67, 78, 185, 190, 68, 124, 190, 133, 66, 147, 74, 205, 68, 52, 157, 96, 194, 98, 192, 27, 207, 68, 217, 22, 154, 194, 59, 9, 208, 68, 237, 54, 205, 194, 0, 0, 208, 68, 0, 0, 0, 195, 99, 101, 0, 0 };

		Path path;
		path.loadPathFromData(searchIcon, sizeof(searchIcon));
		path.applyTransform(AffineTransform::rotation(float_Pi));

		return path;
	}
	if (id == "Home")
	{
		Path path;

		path.loadPathFromData(BackendBinaryData::ToolbarIcons::customInterface, sizeof(BackendBinaryData::ToolbarIcons::customInterface));

		return path;
	}
	if (id == "TOC")
	{
		Path path;
		path.loadPathFromData(BackendBinaryData::ToolbarIcons::hamburgerIcon, sizeof(BackendBinaryData::ToolbarIcons::hamburgerIcon));
		return path;
	}
	if (id == "Drag")
	{
		static const unsigned char pathData[] = { 110,109,0,128,177,67,32,151,2,68,108,0,0,175,67,32,215,3,68,108,0,192,176,67,32,215,3,68,108,0,192,176,67,32,247,5,68,108,192,130,172,67,32,247,5,68,108,192,130,172,67,192,24,5,68,108,192,2,170,67,192,88,6,68,108,192,130,172,67,192,152,7,68,108,192,130,
			172,67,32,183,6,68,108,0,192,176,67,32,183,6,68,108,0,192,176,67,128,212,8,68,108,64,4,175,67,128,212,8,68,108,64,132,177,67,128,20,10,68,108,64,4,180,67,128,212,8,68,108,0,64,178,67,128,212,8,68,108,0,64,178,67,32,183,6,68,108,192,121,182,67,32,183,
			6,68,108,192,121,182,67,64,156,7,68,108,192,249,184,67,64,92,6,68,108,192,121,182,67,64,28,5,68,108,192,121,182,67,32,247,5,68,108,0,64,178,67,32,247,5,68,108,0,64,178,67,32,215,3,68,108,0,0,180,67,32,215,3,68,108,0,128,177,67,32,151,2,68,99,101,0,0 };

		Path path;
		path.loadPathFromData(pathData, sizeof(pathData));

		return path;
	}
	if (id == "Select")
	{
		static const unsigned char pathData[] = { 110,109,0,0,135,67,32,183,0,68,108,0,0,135,67,32,247,1,68,108,0,192,138,67,32,247,1,68,108,0,192,138,67,32,247,11,68,108,0,0,135,67,32,247,11,68,108,0,0,135,67,32,55,13,68,108,0,0,145,67,32,55,13,68,108,0,0,145,67,32,247,11,68,108,0,64,141,67,32,247,
			11,68,108,0,64,141,67,32,247,1,68,108,0,0,145,67,32,247,1,68,108,0,0,145,67,32,183,0,68,108,0,0,135,67,32,183,0,68,99,101,0,0 };

		Path path;
		path.loadPathFromData(pathData, sizeof(pathData));

		return path;
	}
	if (id == "Sun")
	{
		static const unsigned char pathData[] = { 110,109,128,100,90,67,192,73,160,67,108,128,100,90,67,64,37,168,67,108,128,100,95,67,64,37,168,67,108,128,100,95,67,192,73,160,67,108,128,100,90,67,192,73,160,67,99,109,128,178,72,67,128,135,162,67,108,0,41,69,67,0,76,164,67,108,128,77,81,67,64,94,170,
			67,108,0,215,84,67,192,153,168,67,108,128,178,72,67,128,135,162,67,99,109,128,123,116,67,64,222,163,67,108,128,114,103,67,0,99,170,67,108,128,251,106,67,128,39,172,67,108,128,4,120,67,0,163,165,67,108,128,123,116,67,64,222,163,67,99,109,128,146,92,67,
			64,5,170,67,108,128,146,92,67,64,5,170,67,108,145,242,91,67,64,7,170,67,108,8,83,91,67,62,13,170,67,108,76,180,90,67,55,23,170,67,108,194,22,90,67,37,37,170,67,108,207,122,89,67,253,54,170,67,108,214,224,88,67,182,76,170,67,108,58,73,88,67,65,102,170,
			67,108,92,180,87,67,141,131,170,67,108,156,34,87,67,137,164,170,67,108,87,148,86,67,30,201,170,67,108,231,9,86,67,54,241,170,67,108,165,131,85,67,183,28,171,67,108,231,1,85,67,132,75,171,67,108,1,133,84,67,129,125,171,67,108,65,13,84,67,140,178,171,67,
			108,246,154,83,67,133,234,171,67,108,103,46,83,67,71,37,172,67,108,219,199,82,67,173,98,172,67,108,146,103,82,67,143,162,172,67,108,203,13,82,67,196,228,172,67,108,191,186,81,67,35,41,173,67,108,163,110,81,67,127,111,173,67,108,168,41,81,67,172,183,173,
			67,108,250,235,80,67,122,1,174,67,108,192,181,80,67,188,76,174,67,108,29,135,80,67,64,153,174,67,108,47,96,80,67,215,230,174,67,108,16,65,80,67,77,53,175,67,108,210,41,80,67,114,132,175,67,108,132,26,80,67,18,212,175,67,108,49,19,80,67,250,35,176,67,
			108,128,18,80,67,64,69,176,67,108,128,18,80,67,64,69,176,67,108,128,18,80,67,64,69,176,67,108,128,22,80,67,56,149,176,67,108,125,34,80,67,252,228,176,67,108,111,54,80,67,90,52,177,67,108,74,82,80,67,31,131,177,67,108,251,117,80,67,25,209,177,67,108,109,
			161,80,67,22,30,178,67,108,130,212,80,67,227,105,178,67,108,27,15,81,67,82,180,178,67,108,18,81,81,67,51,253,178,67,108,61,154,81,67,85,68,179,67,108,109,234,81,67,141,137,179,67,108,110,65,82,67,174,204,179,67,108,9,159,82,67,141,13,180,67,108,3,3,83,
			67,0,76,180,67,108,26,109,83,67,224,135,180,67,108,11,221,83,67,6,193,180,67,108,143,82,84,67,77,247,180,67,108,91,205,84,67,147,42,181,67,108,31,77,85,67,184,90,181,67,108,138,209,85,67,155,135,181,67,108,71,90,86,67,33,177,181,67,108,0,231,86,67,47,
			215,181,67,108,89,119,87,67,172,249,181,67,108,246,10,88,67,132,24,182,67,108,122,161,88,67,160,51,182,67,108,131,58,89,67,242,74,182,67,108,175,213,89,67,104,94,182,67,108,157,114,90,67,248,109,182,67,108,230,16,91,67,151,121,182,67,108,38,176,91,67,
			62,129,182,67,108,246,79,92,67,231,132,182,67,108,128,146,92,67,64,133,182,67,108,128,146,92,67,64,133,182,67,108,128,146,92,67,64,133,182,67,108,111,50,93,67,64,131,182,67,108,247,209,93,67,66,125,182,67,108,180,112,94,67,73,115,182,67,108,62,14,95,
			67,91,101,182,67,108,49,170,95,67,131,83,182,67,108,42,68,96,67,202,61,182,67,108,198,219,96,67,63,36,182,67,108,163,112,97,67,243,6,182,67,108,99,2,98,67,247,229,181,67,108,169,144,98,67,98,193,181,67,108,25,27,99,67,74,153,181,67,108,91,161,99,67,202,
			109,181,67,108,24,35,100,67,252,62,181,67,108,255,159,100,67,0,13,181,67,108,190,23,101,67,244,215,180,67,108,10,138,101,67,251,159,180,67,108,152,246,101,67,57,101,180,67,108,37,93,102,67,212,39,180,67,108,110,189,102,67,242,231,179,67,108,53,23,103,
			67,188,165,179,67,108,65,106,103,67,94,97,179,67,108,93,182,103,67,1,27,179,67,108,88,251,103,67,213,210,178,67,108,6,57,104,67,6,137,178,67,108,64,111,104,67,197,61,178,67,108,227,157,104,67,64,241,177,67,108,208,196,104,67,170,163,177,67,108,240,227,
			104,67,51,85,177,67,108,46,251,104,67,15,6,177,67,108,124,10,105,67,111,182,176,67,108,207,17,105,67,134,102,176,67,108,128,18,105,67,64,69,176,67,108,128,18,105,67,64,69,176,67,108,128,18,105,67,64,69,176,67,108,128,14,105,67,73,245,175,67,108,131,2,
			105,67,132,165,175,67,108,145,238,104,67,38,86,175,67,108,183,210,104,67,97,7,175,67,108,5,175,104,67,103,185,174,67,108,148,131,104,67,107,108,174,67,108,126,80,104,67,157,32,174,67,108,229,21,104,67,46,214,173,67,108,238,211,103,67,78,141,173,67,108,
			196,138,103,67,43,70,173,67,108,148,58,103,67,244,0,173,67,108,147,227,102,67,211,189,172,67,108,248,133,102,67,244,124,172,67,108,255,33,102,67,129,62,172,67,108,232,183,101,67,161,2,172,67,108,246,71,101,67,123,201,171,67,108,114,210,100,67,52,147,
			171,67,108,167,87,100,67,237,95,171,67,108,227,215,99,67,201,47,171,67,108,120,83,99,67,230,2,171,67,108,187,202,98,67,96,217,170,67,108,2,62,98,67,82,179,170,67,108,169,173,97,67,212,144,170,67,108,12,26,97,67,253,113,170,67,108,136,131,96,67,224,86,
			170,67,108,127,234,95,67,143,63,170,67,108,83,79,95,67,24,44,170,67,108,101,178,94,67,136,28,170,67,108,28,20,94,67,233,16,170,67,108,220,116,93,67,66,9,170,67,108,11,213,92,67,153,5,170,67,108,128,146,92,67,64,5,170,67,108,128,146,92,67,64,5,170,67,
			99,109,128,45,62,67,64,238,174,67,108,128,45,62,67,64,110,177,67,108,0,119,76,67,64,110,177,67,108,0,119,76,67,64,238,174,67,108,128,45,62,67,64,238,174,67,99,109,128,228,107,67,0,28,175,67,108,128,228,107,67,0,156,177,67,108,0,247,123,67,0,156,177,67,
			108,0,247,123,67,0,28,175,67,108,128,228,107,67,0,28,175,67,99,109,128,50,105,67,64,190,180,67,108,0,169,101,67,0,131,182,67,108,128,68,113,67,192,80,188,67,108,128,205,116,67,0,140,186,67,108,128,50,105,67,64,190,180,67,99,109,128,178,79,67,64,213,180,
			67,108,0,233,67,67,192,185,186,67,108,128,114,71,67,64,126,188,67,108,128,59,83,67,192,153,182,67,108,128,178,79,67,64,213,180,67,99,109,0,192,90,67,192,128,183,67,108,0,192,90,67,192,0,191,67,108,0,192,95,67,192,0,191,67,108,0,192,95,67,192,128,183,
			67,108,0,192,90,67,192,128,183,67,99,101,0,0 };

		Path path;
		path.loadPathFromData(pathData, sizeof(pathData));

		return path;
	}
	else if (id == "Night")
	{
		static const unsigned char pathData[] = { 110,109,64,60,160,67,0,30,159,67,98,145,118,170,67,145,155,170,67,125,105,165,67,213,248,181,67,64,12,154,67,64,175,190,67,98,80,16,168,67,44,210,191,67,39,37,176,67,207,140,183,67,192,39,177,67,192,235,176,67,98,227,152,177,67,88,139,170,67,29,59,172,
			67,38,229,161,67,64,60,160,67,0,30,159,67,99,109,64,188,149,67,128,132,166,67,108,0,16,149,67,192,57,171,67,108,128,205,144,67,0,87,173,67,108,128,18,149,67,128,111,175,67,108,64,196,149,67,0,36,180,67,108,0,20,153,67,64,186,176,67,108,128,196,157,67,
			64,133,177,67,108,128,139,155,67,192,80,173,67,108,192,191,157,67,0,26,169,67,108,64,16,153,67,128,234,169,67,108,64,188,149,67,128,132,166,67,99,101,0,0 };

		Path path;
		path.loadPathFromData(pathData, sizeof(pathData));

		return path;
	}
}

}
