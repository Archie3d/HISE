/*  ===========================================================================
*
*   This file is part of HISE.
*   Copyright 2016 Christoph Hart
*
*   HISE is free software: you can redistribute it and/or modify
*   it under the terms of the GNU General Public License as published by
*   the Free Software Foundation, either version 3 of the License, or
*   (at your option) any later version.
*
*   HISE is distributed in the hope that it will be useful,
*   but WITHOUT ANY WARRANTY; without even the implied warranty of
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*   GNU General Public License for more details.
*
*   You should have received a copy of the GNU General Public License
*   along with HISE.  If not, see <http://www.gnu.org/licenses/>.
*
*   Commercial licenses for using HISE in an closed source project are
*   available on request. Please visit the project's website to get more
*   information about commercial licensing:
*
*   http://www.hise.audio/
*
*   HISE is based on the JUCE library,
*   which must be separately licensed for closed source applications:
*
*   http://www.juce.com
*
*   ===========================================================================
*/

#pragma once

namespace hise {
using namespace juce;


class HiseModuleDatabase
{
public:

	static constexpr char moduleWildcard[] = "/hise-modules";

	class CommonData
	{
	protected:

		struct Data
		{
			void createAllProcessors();
			void addFromFactory(FactoryType* f);

			BackendProcessor bp;
			OwnedArray<Processor> allProcessors;
		};

		SharedResourcePointer<Data> data;

		String getProcessorIdFromURL(const String& url, bool forceModuleWildcard, String idPrefix);
		Processor* getProcessorForURL(const String& url, bool forceModuleWildcard, String prefix);
	};

	class ItemGenerator : public hise::MarkdownDataBase::ItemGeneratorBase,
		public CommonData
	{
	public:

		ItemGenerator(File root_) :
			ItemGeneratorBase(root_)
		{}

		MarkdownDataBase::Item createRootItem(MarkdownDataBase& parent) override;

	private:

		MarkdownDataBase::Item createItemForProcessor(Processor* p, const MarkdownDataBase::Item& parent);
		MarkdownDataBase::Item createItemForFactory(FactoryType* owned, const String& factoryName, const MarkdownDataBase::Item& parent);
	};

	class Resolver : public MarkdownParser::LinkResolver,
		public CommonData
	{
	public:

		Resolver(File root_);;

		MarkdownParser::ResolveType getPriority() const override { return MarkdownParser::ResolveType::Autogenerated; }
		Identifier getId() const override { RETURN_STATIC_IDENTIFIER("ModuleDescription"); }
		LinkResolver* clone(MarkdownParser* newParent) const override { return new Resolver(root); }

		String getContent(const String& url) override;

		File root;
	};

	class ScreenshotProvider : public MarkdownParser::ImageProvider,
		public CommonData
	{
	public:

		ScreenshotProvider(MarkdownParser* parent);;
		~ScreenshotProvider();;

		MarkdownParser::ResolveType getPriority() const override { return MarkdownParser::ResolveType::Autogenerated; }
		Identifier getId() const override { RETURN_STATIC_IDENTIFIER("ModuleScreenshotProvider"); }
		ImageProvider* clone(MarkdownParser* newParent) const override { return new ScreenshotProvider(newParent); }

		Image getImage(const String& url, float width) override;

		LookAndFeel_V3 laf;

		class RootWindow;
		
		RootWindow* w;
	};
};

}